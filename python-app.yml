# -----Global Variables-----


# Game Board
board= ["_","_","_",
        "_","_","_",
        "_","_","_"]


# if game is still going 
game_still_going= True


# Who won? Or tie?
winner = None

# Who turn is it
current_player= "X"

# Display Board 
def display_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])


# Play a game of Tic tac toe
def play_game():


    #display initial board
    display_board();
    
    # While the game is still going 
    while game_still_going:
        # handle a single turn of an arbitrary player  
        handle_turn(current_player)
        
        # check if the game has ended
        check_if_game_over()

        # FLip to the other player
        flip_player()
    
    # The game has ended
    if winner == "X"  or winner == "O":
        print(winner + "won.")
    elif winner == None:
        print("Tie.")


# Handle a sigle turn of player 
def handle_turn(player):
    print(player + "'s turn.")
     
    position = input("Choose a position from 1-9:")
     
    valid = False
    while not valid:

        while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            position = input("Choose a position fro 1-9")
        
        position = int (position)- 1

        if board[position]  ==  "_":
            valid = True
        else:
            print ("You can't go there. Go again")
    
    board[position] = player
    
    display_board()


def check_if_game_over():
    check_for_winner()
    check_if_tie()


def check_for_winner():

    #global winner declaration
    global winner 
    #check rows
    row_winner = check_rows()

    #check columns
    column_winner = check_columns()

    #check diagonals
    diagonal_winner = check_diagonals()

    if row_winner:
        #there was a win
        winner = row_winner
    elif column_winner:
        #there was a win
        winner = column_winner
    elif diagonal_winner:
        #there was a win
        winner = diagonal_winner
    else:
        #there was no win
        winner = None
    return

def check_rows():
    #Setup global Variables
    global game_still_going
    #   Check if any of the rows have all he same value ( and is not empty)
    row_1 = board[0] == board[1] == board[2] != "_"
    row_2 = board[3] == board[4] == board[5] != "_"
    row_3 = board[6] == board[7] == board[8] != "_"
    #if any row does have a match, flag that there is a win
    if row_1 or row_2 or row_3:
        game_still_going = False

    # Return the winner
    if row_1:   
        return board[0]
    elif row_2:
        return board[3]
    elif row_3:
        return board[6]

    return

def check_columns():
 #Setup global Variables
    global game_still_going
    #   Check if any of the rows have all he same value ( and is not empty)
    column_1 = board[0] == board[3] == board[6] != "_"
    column_2 = board[1] == board[4] == board[7] != "_"
    column_3 = board[2] == board[5] == board[8] != "_"
    #if any column does have a match, flag that there is a win
    if column_1 or column_2 or column_3:
        game_still_going = False

    # Return the winner
    if column_1:   
        return board[0]
    elif column_2:
        return board[1]
    elif column_3:
        return board[2]

    return

def check_diagonals():
     #Setup global Variables
    global game_still_going
    #   Check if any of the rows have all he same value ( and is not empty)
    diagonals_1 = board[0] == board[4] == board[6] != "_"
    diagonals_2 = board[6] == board[4] == board[2] != "_"

    #if any row does have a match, flag that there is a win
    if diagonals_1 or diagonals_2:
        game_still_going = False

    # Return the winner
    if diagonals_1:   
        return board[0]
    elif diagonals_2:
        return board[3]


    return
    return

def check_if_tie():
     
    global game_still_going
    if "_" not in board:
        game_still_going = False

    return

def flip_player():
    # global variables we need
    global current_player
    # if the current player was x, then change it to O 
    if current_player == "X":
        current_player = "O"
     # if the current player was O, then change it to X
    elif current_player == "O":
        current_player = "X"
    return



play_game()
